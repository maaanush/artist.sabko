import { useId } from 'react'
import { cn } from '@/lib/utils'

type AvatarMaskProps = {
  imageSrc?: string | null
  className?: string
  onClick?: () => void
  'aria-label'?: string
  size?: number
  loading?: boolean
}

export function AvatarMask({ imageSrc, className, onClick, size = 140, loading = false, ...rest }: AvatarMaskProps) {
  const clipId = useId().replace(/:/g, '')

  return (
    <div
      className={cn(
        'relative group inline-flex items-center justify-center',
        'select-none',
        onClick ? 'cursor-pointer' : 'cursor-default',
        className,
      )}
      role="button"
      tabIndex={0}
      onClick={loading ? undefined : onClick}
      style={{ width: size, height: size }}
      {...rest}
    >
      <svg width={size} height={size} viewBox="0 0 141 141" xmlns="http://www.w3.org/2000/svg" className="block">
        <defs>
          <clipPath id={clipId} clipPathUnits="userSpaceOnUse">
            <path d="M66.2276 2.52444C68.8767 0.364248 72.6797 0.364248 75.3286 2.52444L81.0404 7.1822C82.8383 8.64773 85.2315 9.15798 87.47 8.55292L94.5664 6.63524C97.8618 5.74469 101.329 7.29018 102.87 10.3358L106.223 16.9656C107.267 19.0288 109.238 20.4652 111.522 20.827L118.815 21.9822C122.175 22.5144 124.704 25.326 124.879 28.7233L125.262 36.2029C125.38 38.5026 126.592 40.6072 128.522 41.8647L134.761 45.9311C137.602 47.7831 138.766 51.3671 137.553 54.5347L134.869 61.5484C134.048 63.6941 134.3 66.1028 135.548 68.0317L139.623 74.3281C141.465 77.1737 141.071 80.9178 138.679 83.3193L133.401 88.6169C131.778 90.246 131.031 92.5518 131.391 94.823L132.565 102.237C133.096 105.591 131.21 108.86 128.041 110.081L121.122 112.744C118.968 113.574 117.342 115.384 116.75 117.614L114.834 124.826C113.959 128.12 110.894 130.349 107.49 130.167L100.14 129.774C97.8266 129.65 95.5953 130.646 94.1437 132.451L89.5084 138.216C87.3671 140.879 83.649 141.67 80.6084 140.109L74.0665 136.751C72.0022 135.692 69.5541 135.692 67.49 136.751L60.9476 140.109C57.9076 141.67 54.1894 140.879 52.0482 138.216L47.4127 132.451C45.9612 130.646 43.7298 129.65 41.4167 129.774L34.066 130.167C30.6625 130.349 27.5975 128.12 26.7226 124.826L24.8065 117.614C24.2141 115.384 22.5885 113.574 20.435 112.744L13.5157 110.081C10.3459 108.86 8.46029 105.591 8.9915 102.237L10.1656 94.823C10.5253 92.5518 9.77818 90.246 8.15522 88.6169L2.87736 83.3193C0.48512 80.9178 0.0919703 77.1737 1.9333 74.3281L6.00781 68.0317C7.25608 66.1028 7.50844 63.6941 6.68721 61.5484L4.00268 54.5347C2.7903 51.3671 3.95369 47.7831 6.79542 45.9311L13.035 41.8647C14.9644 40.6072 16.1758 38.5026 16.2938 36.2029L16.6777 28.7233C16.8521 25.326 19.3811 22.5144 22.7416 21.9822L30.0345 20.827C32.3184 20.4652 34.2895 19.0288 35.333 16.9656L38.6864 10.3358C40.227 7.29018 43.6949 5.74468 46.9902 6.63524L54.0863 8.55292C56.3252 9.15798 58.7184 8.64773 60.5156 7.1822L66.2276 2.52444Z" />
          </clipPath>
        </defs>

        {/* Background placeholder or image */}
        {imageSrc ? (
          <image
            href={imageSrc}
            width="141"
            height="141"
            preserveAspectRatio="xMidYMid slice"
            clipPath={`url(#${clipId})`}
          />
        ) : (
          <g clipPath={`url(#${clipId})`} className={loading ? 'animate-pulse' : undefined}>
            <rect width="141" height="141" fill="#E5E7EB" />
          </g>
        )}
      </svg>

      {/* Empty state icon (camera) */}
      {!imageSrc && !loading && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <CameraPlusIcon41 />
        </div>
      )}

      {/* Hover overlay with swap icon when image exists */}
      {imageSrc && (
        <div className="absolute inset-0 hidden items-center justify-center opacity-0 transition-opacity group-hover:flex group-hover:opacity-100">
          <SwapOverlayIcon57 />
        </div>
      )}
    </div>
  )
}

function CameraPlusIcon41() {
  return (
    <svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M26.366 22.0713C26.366 22.4028 26.2343 22.7208 25.9999 22.9552C25.7654 23.1896 25.4475 23.3213 25.116 23.3213H21.366V27.0713C21.366 27.4028 21.2343 27.7208 20.9999 27.9552C20.7654 28.1896 20.4475 28.3213 20.116 28.3213C19.7844 28.3213 19.4665 28.1896 19.2321 27.9552C18.9977 27.7208 18.866 27.4028 18.866 27.0713V23.3213H15.116C14.7844 23.3213 14.4665 23.1896 14.2321 22.9552C13.9977 22.7208 13.866 22.4028 13.866 22.0713C13.866 21.7398 13.9977 21.4218 14.2321 21.1874C14.4665 20.953 14.7844 20.8213 15.116 20.8213H18.866V17.0713C18.866 16.7398 18.9977 16.4218 19.2321 16.1874C19.4665 15.953 19.7844 15.8213 20.116 15.8213C20.4475 15.8213 20.7654 15.953 20.9999 16.1874C21.2343 16.4218 21.366 16.7398 21.366 17.0713V20.8213H25.116C25.4475 20.8213 25.7654 20.953 25.9999 21.1874C26.2343 21.4218 26.366 21.7398 26.366 22.0713ZM36.366 13.3213V30.8213C36.366 31.8159 35.9709 32.7697 35.2676 33.4729C34.5644 34.1762 33.6105 34.5713 32.616 34.5713H7.61597C6.6214 34.5713 5.66758 34.1762 4.96432 33.4729C4.26106 32.7697 3.86597 31.8159 3.86597 30.8213V13.3213C3.86597 12.3267 4.26106 11.3729 4.96432 10.6696C5.66758 9.96638 6.6214 9.57129 7.61597 9.57129H11.9472L13.7097 6.93379C13.9376 6.5922 14.2462 6.31201 14.6081 6.11798C14.97 5.92395 15.3741 5.82205 15.7847 5.82129H24.4472C24.8579 5.82205 25.262 5.92395 25.6239 6.11798C25.9858 6.31201 26.2943 6.5922 26.5222 6.93379L28.2847 9.57129H32.616C33.6105 9.57129 34.5644 9.96638 35.2676 10.6696C35.9709 11.3729 36.366 12.3267 36.366 13.3213ZM33.866 13.3213C33.866 12.9898 33.7343 12.6718 33.4999 12.4374C33.2654 12.203 32.9475 12.0713 32.616 12.0713H27.616C27.4101 12.0714 27.2074 12.0207 27.0259 11.9237C26.8443 11.8266 26.6896 11.6863 26.5753 11.515L24.4472 8.32129H15.7847L13.6566 11.515C13.5423 11.6863 13.3876 11.8266 13.206 11.9237C13.0245 12.0207 12.8218 12.0714 12.616 12.0713H7.61597C7.28445 12.0713 6.9665 12.203 6.73208 12.4374C6.49766 12.6718 6.36597 12.9898 6.36597 13.3213V30.8213C6.36597 31.1528 6.49766 31.4708 6.73208 31.7052C6.9665 31.9396 7.28445 32.0713 7.61597 32.0713H32.616C32.9475 32.0713 33.2654 31.9396 33.4999 31.7052C33.7343 31.4708 33.866 31.1528 33.866 30.8213V13.3213Z" fill="black"/>
    </svg>
  )
}

function SwapOverlayIcon57() {
  return (
    <svg width="57" height="57" viewBox="0 0 57 57" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect x="0.115967" y="0.821289" width="56" height="56" rx="28" fill="black" fillOpacity="0.7"/>
      <path d="M43.116 16.3213V32.5713C43.116 33.2343 42.8526 33.8702 42.3837 34.3391C41.9149 34.8079 41.279 35.0713 40.616 35.0713H23.6332L25.2503 36.6869C25.3665 36.8031 25.4586 36.9409 25.5215 37.0927C25.5843 37.2444 25.6167 37.407 25.6167 37.5713C25.6167 37.7355 25.5843 37.8982 25.5215 38.0499C25.4586 38.2017 25.3665 38.3395 25.2503 38.4557C25.1342 38.5718 24.9963 38.6639 24.8446 38.7268C24.6928 38.7896 24.5302 38.822 24.366 38.822C24.2017 38.822 24.0391 38.7896 23.8873 38.7268C23.7356 38.6639 23.5977 38.5718 23.4816 38.4557L19.7316 34.7057C19.6154 34.5896 19.5232 34.4517 19.4603 34.3C19.3974 34.1482 19.365 33.9856 19.365 33.8213C19.365 33.657 19.3974 33.4944 19.4603 33.3426C19.5232 33.1909 19.6154 33.053 19.7316 32.9369L23.4816 29.1869C23.7161 28.9524 24.0343 28.8206 24.366 28.8206C24.6977 28.8206 25.0158 28.9524 25.2503 29.1869C25.4849 29.4215 25.6167 29.7396 25.6167 30.0713C25.6167 30.403 25.4849 30.7211 25.2503 30.9557L23.6332 32.5713H40.616V16.3213H23.116V17.5713C23.116 17.9028 22.9843 18.2208 22.7499 18.4552C22.5154 18.6896 22.1975 18.8213 21.866 18.8213C21.5344 18.8213 21.2165 18.6896 20.9821 18.4552C20.7477 18.2208 20.616 17.9028 20.616 17.5713V16.3213C20.616 15.6582 20.8794 15.0224 21.3482 14.5535C21.817 14.0847 22.4529 13.8213 23.116 13.8213H40.616C41.279 13.8213 41.9149 14.0847 42.3837 14.5535C42.8526 15.0224 43.116 15.6582 43.116 16.3213ZM34.366 38.8213C34.0344 38.8213 33.7165 38.953 33.4821 39.1874C33.2477 39.4218 33.116 39.7398 33.116 40.0713V41.3213H15.616V25.0713H32.5988L30.9816 26.6869C30.747 26.9215 30.6153 27.2396 30.6153 27.5713C30.6153 27.903 30.747 28.2211 30.9816 28.4557C31.2161 28.6902 31.5343 28.822 31.866 28.822C32.1977 28.822 32.5158 28.6902 32.7503 28.4557L36.5003 24.7057C36.6166 24.5896 36.7088 24.4517 36.7717 24.3C36.8346 24.1482 36.8669 23.9856 36.8669 23.8213C36.8669 23.657 36.8346 23.4944 36.7717 23.3426C36.7088 23.1909 36.6166 23.053 36.5003 22.9369L32.7503 19.1869C32.5158 18.9524 32.1977 18.8206 31.866 18.8206C31.5343 18.8206 31.2161 18.9524 30.9816 19.1869C30.747 19.4215 30.6153 19.7396 30.6153 20.0713C30.6153 20.403 30.747 20.7211 30.9816 20.9557L32.5988 22.5713H15.616C14.9529 22.5713 14.317 22.8347 13.8482 23.3035C13.3794 23.7724 13.116 24.4082 13.116 25.0713V41.3213C13.116 41.9843 13.3794 42.6202 13.8482 43.0891C14.317 43.5579 14.9529 43.8213 15.616 43.8213H33.116C33.779 43.8213 34.4149 43.5579 34.8837 43.0891C35.3526 42.6202 35.616 41.9843 35.616 41.3213V40.0713C35.616 39.7398 35.4843 39.4218 35.2499 39.1874C35.0154 38.953 34.6975 38.8213 34.366 38.8213Z" fill="white"/>
    </svg>
  )
}

export default AvatarMask


